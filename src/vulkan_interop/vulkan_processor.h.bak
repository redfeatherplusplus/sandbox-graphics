#pragma once

#include <vulkan/vulkan.hpp>
#include <GL/glew.h>

const int WIDTH  = 800;
const int HEIGHT = 600;
const int WORKGROUP_SIZE = 32;

struct Pixel
{
    float r, g, b, a;
} ;

struct SharedHandles
{
    int memory;
    int gl_ready;
    int gl_complete;
};

class PostProcessor
{
private:
    vk::Instance instance;

    vk::PhysicalDevice physical_device;
    vk::Device device;

    vk::CommandBuffer command_buffer;
    vk::CommandPool command_pool;

    vk::Queue queue;
    uint32_t queue_family_index;

    vk::Pipeline pipeline;
    vk::PipelineLayout pipeline_layout;
    vk::ShaderModule compute_shader_module;

    vk::DescriptorSetLayout descriptor_set_layout;
    vk::DescriptorPool descriptor_pool;
    vk::DescriptorSet descriptor_set;

    vk::Buffer buffer;
    vk::DeviceMemory buffer_memory;
    uint32_t buffer_size;

    // Shared data
    struct
    {
        vk::Semaphore gl_ready;
        vk::Semaphore gl_complete;
    } semaphores;

    SharedHandles handles;

    vk::Image shared_image;
    vk::Sampler shared_sampler;
    vk::DeviceMemory shared_device_memory;
    vk::ImageView shared_view;

    vk::CommandBuffer transition_command_buffer;

    uint64_t memory_size;

    // GL Data
    GLuint gl_ready;
    GLuint gl_complete;

    GLuint gltex;
    GLuint glmem;

public:
    void run();

    void init();
    void initGL(GLuint tex);

    void execute();
private:
    void initVulkan();
    void initShared();

    void createInstance();
    bool instanceExtensionsFound();

    void findPhysicalDevice();
    bool deviceExtensionsFound(vk::PhysicalDevice device);

    void createDevice();
    void createBuffer();
    void createBuffer(vk::DeviceSize size, vk::BufferUsageFlags usage, vk::MemoryPropertyFlags properties, vk::Buffer &buffer, vk::DeviceMemory &buffer_memory);
    void createDescriptorSetLayout();
    void createDescriptorSet();
    void createComputePipeline();
    void createCommandBuffer();

    void runCommandBuffer();
    void saveRenderedImage();
    void saveGLImage(vk::DeviceMemory memory);
    void cleanup();

    void copyBuffer(vk::Buffer src, vk::Buffer dst, vk::DeviceSize size);
    void copyImage(vk::Image src, vk::Image dst);

    void setImageLayout(vk::CommandBuffer cmdbuffer, vk::Image image, vk::ImageAspectFlagBits aspect_mask, vk::ImageLayout old_layout, vk::ImageLayout new_layout);

    uint32_t getComputeQueueFamilyIndex();

    uint32_t findMemoryType(uint32_t memory_type_bits, vk::MemoryPropertyFlags properties);
    vk::AccessFlags accessFlagsForLayout(vk::ImageLayout layout);
    vk::PipelineStageFlags pipelineStageForLayout(vk::ImageLayout layout);

    uint32_t *readFile(uint32_t &length, const char *filename);
} ;
